import json
from typing import Optional, Literal

from aiogram import Router, F
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from src.database import advertisements
from src.database.models import Advertisement
from src.keyboards.admin import MailingKb


class AdvertisementAdding(StatesGroup):
    wait_for_content_message = State()
    add_preview = State()
    wait_for_markup_data = State()
    wait_for_confirm = State()


class Messages:
    @staticmethod
    def ask_for_post_content():
        return "–ü—Ä–∏—à–ª–∏—Ç–µ <u>—Ç–µ–∫—Å—Ç</u> –ø–æ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å. –î–æ–±–∞–≤—å—Ç–µ –Ω—É–∂–Ω—ã–µ <u>–º–µ–¥–∏–∞-—Ñ–∞–π–ª—ã</u>"

    @staticmethod
    def get_button_data_incorrect():
        return '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –≤–µ—Ä–Ω–∞. ' \
               '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏, –≤–æ –≤—Ç–æ—Ä–æ–π - —Å—Å—ã–ª–∫—É.'

    @staticmethod
    def prepare_post():
        return "<i>–ò—Ç–æ–≥–æ–≤—ã–π –≤–∏–¥ —Ä–µ–∫–ª–∞–º—ã:</i>"

    @staticmethod
    def get_mailing_canceled():
        return '‚õî –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã –æ—Ç–º–µ–Ω–µ–Ω–æ'

    @staticmethod
    def get_markup_adding_manual():
        return '''–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∏ –∞–¥—Ä–µ—Å —Å—Å—ã–ª–∫–∏. –ù–∞–ø—Ä–∏–º–µ—Ä, —Ç–∞–∫: \n
Telegram telegram.org \n
–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–Ω–æ–ø–æ–∫ –∑–∞ —Ä–∞–∑, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å ¬´|¬ª. –ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π —Ä—è–¥ ‚Äì —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏. 
–ù–∞–ø—Ä–∏–º–µ—Ä, —Ç–∞–∫: \n
Telegram telegram.org | –ù–æ–≤–æ—Å—Ç–∏ telegram.org/blog
FAQ telegram.org/faq | –°–∫–∞—á–∞—Ç—å telegram.org/apps'''

    @staticmethod
    def ask_about_save_ad():
        return "<u><b>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∫–ª–∞–º—É?</b></u>"


class DeleteAdCallback(CallbackData, prefix='delete_ad'):
    ad_id: int


class AppendPreviewCallback(CallbackData, prefix='preview'):
    action: Literal['T', 'F']
    ad_id: Optional[int] = None


class Keyboards:

    @staticmethod
    def __get_inline_kb_from_json(ad: Advertisement) -> InlineKeyboardMarkup:
        """ –ò–∑ —Å–ª–æ–≤–∞—Ä—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–µ–ª–∞–µ—Ç –æ–±—ä–µ–∫—Ç """
        markup = json.loads(ad.markup_json)
        inline_kb = []

        for row in markup:
            a = []
            inline_kb.append(a)
            for b in row:
                a.append(InlineKeyboardButton(text=b.get('text'), url=b.get('url')))

        return InlineKeyboardMarkup(inline_keyboard=inline_kb)

    @staticmethod
    def get_add_advertisement() -> InlineKeyboardMarkup:
        builder = InlineKeyboardBuilder()
        builder.button(text='‚ûï', callback_data='add_advertisement')
        return builder.as_markup()

    @staticmethod
    def get_ad_actions_markup(ad: Advertisement) -> InlineKeyboardMarkup:
        builder = InlineKeyboardBuilder()

        if ad.markup_json is None:
            markup = None
        else:
            markup = Keyboards.__get_inline_kb_from_json(ad=ad)

        act = 'T' if ad.show_preview else 'F'
        builder.button(
            text=f"–ü—Ä–µ–≤—å—é: {'‚úÖ' if ad.show_preview else '‚ùå'}",
            callback_data=AppendPreviewCallback(action=act, ad_id=ad.id)
        )
        builder.button(text='‚ùå –£–¥–∞–ª–∏—Ç—å ‚ùå', callback_data=DeleteAdCallback(ad_id=ad.id))
        return markup

    @staticmethod
    def get_ask_about_preview():
        builder = InlineKeyboardBuilder()
        builder.button(text='–î–∞', callback_data=AppendPreviewCallback(action='T'))
        builder.button(text='–ù–µ—Ç', callback_data=AppendPreviewCallback(action='F'))
        return builder.as_markup()

    @staticmethod
    def add_button():
        builder = InlineKeyboardBuilder()
        builder.button(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∫–Ω–æ–ø–∫–∏', callback_data='save_ad_wout_button')
        return builder.as_markup()

    @staticmethod
    def get_save():
        builder = InlineKeyboardBuilder()
        builder.button(text='üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å üíæ', callback_data='save_ad')
        return builder.as_markup()

    @staticmethod
    def get_save_or_cancel():
        builder = InlineKeyboardBuilder()

        builder.button(text='üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å üíæ', callback_data='save_ad')
        builder.button(text='üîô –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel_ad_creating')

        builder.adjust(1)
        return builder.as_markup()


async def __handle_admin_ad_shows_button(message: Message):
    await message.answer(text='üìÑ –ü–æ–∫–∞–∑—ã —Ä–µ–∫–ª–∞–º—ã üìÑ', reply_markup=Keyboards.get_add_advertisement())
    for ad in advertisements.get_active_ads():
        text = f"{ad.text} \n\n–ü–æ–∫–∞–∑–∞–Ω–æ —Ä–∞–∑: {ad.showed_count}"
        markup = Keyboards.get_ad_actions_markup(ad)
        await message.answer(text=text, reply_markup=markup, parse_mode='HTML')


async def __handle_toggle_show_preview(callback: CallbackQuery, callback_data: AppendPreviewCallback):
    ad = advertisements.get_ad_by_id(ad_id=int(callback_data.ad_id))
    if not ad:
        await callback.message.delete()
        return

    show_preview = True if callback_data.get('action') == 'True' else False
    ad = advertisements.change_show_preview(advertisement=ad, show_preview=show_preview)

    text = f"{ad.text} \n\n–ü–æ–∫–∞–∑–∞–Ω–æ —Ä–∞–∑: {ad.showed_count}"
    markup = Keyboards.get_ad_actions_markup(ad)
    await callback.message.edit_text(text=text, reply_markup=markup, disable_web_page_preview=not show_preview)


async def __handle_delete_advertisement_callback(
        callback: CallbackQuery, callback_data: DeleteAdCallback
):
    ad_id = callback_data.ad_id
    advertisements.delete_ad(advertisement_id=ad_id)
    await callback.message.delete()


async def __handle_add_advertisement_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await state.set_state(AdvertisementAdding.wait_for_content_message.state)
    await callback.message.answer('‚úè –ü—Ä–∏—à–ª–∏—Ç–µ —Ä–µ–∫–ª–∞–º–Ω—ã–π —Ç–µ–∫—Å—Ç:')


async def __handle_new_advertisement_content_message(message: Message, state: FSMContext):
    await state.update_data(text=message.html_text)

    await message.answer(text='–î–æ–±–∞–≤–ª—è—Ç—å –ø—Ä–µ–≤—å—é?', reply_markup=Keyboards.get_ask_about_preview())
    await state.set_state(AdvertisementAdding.add_preview.state)


async def __handle_add_preview_callback(
        callback: CallbackQuery, callback_data: AppendPreviewCallback, state: FSMContext
):
    await callback.message.delete()
    await state.update_data(append_preview=callback_data.action)

    await callback.message.answer(
        text=Messages.get_markup_adding_manual(),
        reply_markup=Keyboards.add_button(),
        disable_web_page_preview=True
    )
    await state.set_state(AdvertisementAdding.wait_for_markup_data.state)


async def __handle_url_button_data(message: Message, state: FSMContext):
    state_data = await state.get_data()
    markup = MailingKb.generate_markup_from_text(message.text)

    try:
        await message.answer(text=state_data.get('text'), reply_markup=markup)
    except Exception:
        await message.answer(
            '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∫–Ω–æ–ø–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:',
            reply_markup=Keyboards.add_button()
        )
        return

    bttns = []
    for row in markup.inline_keyboard:
        r = []
        bttns.append(r)
        for b in row:
            r.append({'text': b.text, 'url': b.url})

    d = json.dumps(bttns)
    await state.update_data(markup=d)
    await message.answer(Messages.ask_about_save_ad(), reply_markup=Keyboards.get_save_or_cancel())
    await state.set_state(AdvertisementAdding.wait_for_confirm.state)


async def __handle_continue_wout_button_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    data = await state.get_data()

    markup_json = data.get('markup')
    markup = InlineKeyboardMarkup.to_object(markup_json) if markup_json else None
    show_preview = True if data.get('append_preview') == 'True' else False

    await callback.message.answer(Messages.prepare_post())
    await callback.message.answer(
        text=data.get('text'), reply_markup=markup, disable_web_page_preview=not show_preview
    )

    await callback.message.answer(Messages.ask_about_save_ad(), reply_markup=Keyboards.get_save_or_cancel())
    await state.set_state(AdvertisementAdding.wait_for_confirm.state)


async def __handle_save_ad_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    data = await state.get_data()
    await state.clear()

    show_preview = True if data.get('append_preview') == 'T' else False
    advertisements.create_ad(
        text=data.get('text'), markup_json=data.get('markup'), show_preview=show_preview
    )

    await callback.message.answer('‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ')
    await __handle_admin_ad_shows_button(callback.message)


async def __handle_ad_creating_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer(Messages.get_mailing_canceled())
    await state.clear()


def register_edit_ads_handlers(router: Router):
    # –ö–Ω–æ–ø–∫–∞ –∏–∑ –º–µ–Ω—é
    router.message.register(__handle_admin_ad_shows_button, F.text == 'üìÑ –ü–æ–∫–∞–∑—ã —Ä–µ–∫–ª–∞–º—ã üìÑ')

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã
    router.callback_query.register(
        __handle_add_advertisement_callback, F.data == 'add_advertisement'
    )

    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –Ω–æ–≤–æ–π —Ä–µ–∫–ª–∞–º—ã
    router.message.register(
        __handle_new_advertisement_content_message, AdvertisementAdding.wait_for_content_message
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–µ–≤—å—é? (–ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏)
    router.callback_query.register(
        __handle_add_preview_callback,
        AppendPreviewCallback.filter(),
        AdvertisementAdding.add_preview,
    )

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è url-–∫–Ω–æ–ø–∫–∏
    router.message.register(
        __handle_url_button_data, AdvertisementAdding.wait_for_markup_data
    )

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ª–±—ç–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –±–µ–∑ url-–∫–Ω–æ–ø–∫–∏
    router.callback_query.register(
        __handle_continue_wout_button_callback, AdvertisementAdding.wait_for_markup_data,
    )

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ª–±—ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã
    router.callback_query.register(
        __handle_save_ad_callback, F.data == 'save_ad', AdvertisementAdding.wait_for_confirm
    )

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã
    router.callback_query.register(__handle_ad_creating_callback, F.data == "cancel_ad_creating")

    # –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã
    router.callback_query.register(
        __handle_delete_advertisement_callback, DeleteAdCallback.filter()
    )

    router.callback_query.register(__handle_toggle_show_preview, AppendPreviewCallback.filter())
