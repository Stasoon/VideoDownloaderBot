import os
import csv
from datetime import datetime
from tempfile import NamedTemporaryFile

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, FSInputFile

from src.database import users
from src.database.users import get_all_users
from src.keyboards.admin import AdminKeyboards, StatisticCallback


# region Utils

class Utils:
    @staticmethod
    def __get_users_csv_filename() -> str:
        csv_folder = 'users_export'

        if not os.path.exists(csv_folder):
            os.mkdir(csv_folder)

        date = datetime.now().strftime("%Y.%m.%d")
        file_name = f"{csv_folder}/–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ {date}.csv"

        if os.path.exists(file_name):
            os.remove(file_name)
        return file_name

    @staticmethod
    def write_users_to_xl() -> str:
        file_name = Utils.__get_users_csv_filename()

        with open(file_name, 'w', newline='', encoding='utf-8-sig') as csv_file:
            fieldnames = [
                'telegram_id', '–ò–º—è', '–Æ–∑–µ—Ä–Ω–µ–π–º', '–í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
            ]
            writer = csv.DictWriter(csv_file, fieldnames=fieldnames)
            writer.writeheader()

            # –ó–∞–ø–∏—à–∏—Ç–µ –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –≤ CSV —Ñ–∞–π–ª
            for user in get_all_users():
                writer.writerow({
                    'telegram_id': user.telegram_id,
                    '–ò–º—è': user.name,
                    '–Æ–∑–µ—Ä–Ω–µ–π–º': user.username,
                    '–í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏': user.registration_timestamp,
                })

        return file_name

    @staticmethod
    def write_user_ids_to_txt() -> str:
        with NamedTemporaryFile(delete=False) as temp_file:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            for user in get_all_users():
                temp_file.write(f"{user.telegram_id}\n".encode('utf-8'))

            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            temp_file_path = temp_file.name
        return temp_file_path


class Messages:
    @staticmethod
    def get_statistic_info(key: str) -> str:
        return {
            'all_time': f'–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–ª–æ—Å—å –±–æ—Ç–æ–º: <b>{users.get_users_total_count()} —é–∑–µ—Ä–æ–≤</b>',
            'month': Messages.get_count_per_hours('–º–µ—Å—è—Ü', 30 * 24),
            'week': Messages.get_count_per_hours('–Ω–µ–¥–µ–ª—é', 7 * 24),
            'day': Messages.get_count_per_hours('—Å—É—Ç–∫–∏', 24),
            'hour': Messages.get_count_per_hours('—á–∞—Å', 1),
            'other': 'üîò –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: ',
        }.get(key)

    @staticmethod
    def get_menu():
        users_total_count = users.get_users_total_count()
        blocked_users_count = users.get_blocked_users_count()
        text = (
            f'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ \n\n'
            f'üë• –í—Å–µ–≥–æ –≤ –±–∞–∑–µ: {users_total_count} \n'
            f'üåê –û–Ω–ª–∞–π–Ω: {users.get_online_users_count()} \n'
            f'üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {blocked_users_count} \n'
            f'üü¢ –ñ–∏–≤—ã—Ö: {users_total_count - blocked_users_count}\n'
        )
        return text + f' \nüìä –í—ã–±–µ—Ä–∏—Ç–µ, –∑–∞ –∫–∞–∫–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:'

    @staticmethod
    def get_count_per_hours(time_word: str, hours: int):
        return f'–ó–∞ {time_word} –≤ –±–æ—Ç–∞ –ø—Ä–∏—à–ª–∏: \n' \
               f'<b>{users.get_users_registered_within_hours_count(hours)} —é–∑–µ—Ä–∞(–æ–≤)</b>'


class StatsGettingStates(StatesGroup):
    wait_for_hours_count = State()

# endregion


# region Handlers

async def handle_admin_statistic_button(message: Message):
    await message.answer(text=Messages.get_menu(), reply_markup=AdminKeyboards.get_statistics())


async def handle_show_stats_callback(callback: CallbackQuery, state: FSMContext, callback_data: StatisticCallback):
    message = callback.message

    if callback_data.action == 'back':
        await message.edit_text(text=Messages.get_menu(), reply_markup=AdminKeyboards.get_statistics())
        await state.clear()
        return

    response = Messages.get_statistic_info(callback_data.action)
    if response:
        await message.edit_text(text=response, reply_markup=AdminKeyboards.get_back_from_stats())

    if callback_data.action == 'other':
        await state.set_state(StatsGettingStates.wait_for_hours_count)


async def handle_get_hours_message(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer(
            text='‚ùó–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:',
            reply_markup=AdminKeyboards.get_back_from_stats()
        )
        return

    users_count = users.get_users_registered_within_hours_count(int(message.text))
    await message.answer(
        text=Messages.get_count_per_hours(f'{message.text} —á–∞—Å–æ–≤', users_count),
        reply_markup=AdminKeyboards.get_back_from_stats()
    )
    await state.clear()


async def handle_export_callback(callback: CallbackQuery):
    file_name = Utils.write_users_to_xl()
    await callback.message.answer_document(document=FSInputFile(path=file_name))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
    txt_temp_file_path = Utils.write_user_ids_to_txt()
    await callback.message.answer_document(document=FSInputFile(path=txt_temp_file_path, filename='user_ids.txt'))
    os.remove(txt_temp_file_path)
    await callback.answer()


# endregion


def register_admin_statistic_handlers(router: Router):
    # –ü–µ—Ä–µ—Ö–æ–¥ –∏–∑ –º–µ–Ω—é
    router.message.register(handle_admin_statistic_button, F.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä')

    # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç
    router.callback_query.register(handle_export_callback, StatisticCallback.filter(F.action == 'export'))

    # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥
    router.callback_query.register(handle_show_stats_callback, StatisticCallback.filter())

    # –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞—Å–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    router.message.register(handle_get_hours_message, StatsGettingStates.wait_for_hours_count)
